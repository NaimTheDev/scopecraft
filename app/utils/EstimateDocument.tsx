import React from "react";
import { Document, Page, Text, View, StyleSheet } from "@react-pdf/renderer";
import type { GeneratedEstimate } from "~/stores/useQuestionnaireStore";

const styles = StyleSheet.create({
  page: {
    flexDirection: "column",
    backgroundColor: "#ffffff",
    padding: 30,
    fontFamily: "Helvetica",
  },
  header: {
    marginBottom: 20,
    textAlign: "center",
  },
  title: {
    fontSize: 24,
    fontWeight: "bold",
    color: "#1e40af",
    marginBottom: 10,
  },
  projectName: {
    fontSize: 18,
    color: "#374151",
    marginBottom: 20,
  },
  section: {
    margin: 10,
    padding: 10,
    flexGrow: 1,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#1f2937",
    marginBottom: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#e5e7eb",
    paddingBottom: 5,
  },
  summaryContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 20,
    backgroundColor: "#f8fafc",
    padding: 15,
    borderRadius: 5,
  },
  summaryItem: {
    flex: 1,
  },
  summaryLabel: {
    fontSize: 12,
    color: "#6b7280",
    marginBottom: 5,
  },
  summaryValue: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#1f2937",
  },
  totalCost: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#1e40af",
  },
  breakdownItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    padding: 8,
    marginBottom: 5,
    backgroundColor: "#f9fafb",
    borderRadius: 3,
  },
  breakdownFeature: {
    fontSize: 12,
    color: "#374151",
    flex: 1,
  },
  breakdownHours: {
    fontSize: 10,
    color: "#6b7280",
    marginRight: 10,
  },
  breakdownCost: {
    fontSize: 12,
    fontWeight: "bold",
    color: "#1e40af",
  },
  footer: {
    marginTop: 30,
    textAlign: "center",
    fontSize: 10,
    color: "#6b7280",
  },
  proposalHeader: {
    backgroundColor: "#1e40af",
    color: "#ffffff",
    padding: 20,
    marginBottom: 20,
    borderRadius: 5,
  },
  proposalTitle: {
    fontSize: 28,
    fontWeight: "bold",
    color: "#ffffff",
    marginBottom: 10,
  },
});

interface EstimateDocumentProps {
  estimate: GeneratedEstimate;
  projectName: string;
  isProposal?: boolean;
}

export const EstimateDocument: React.FC<EstimateDocumentProps> = ({
  estimate,
  projectName,
  isProposal = false,
}) => (
  <Document>
    <Page size="A4" style={styles.page}>
      {/* Header */}
      <View style={isProposal ? styles.proposalHeader : styles.header}>
        <Text style={isProposal ? styles.proposalTitle : styles.title}>
          {isProposal ? "Project Proposal" : "Project Estimate"}
        </Text>
        <Text style={styles.projectName}>{projectName}</Text>
        {isProposal && (
          <Text style={{ fontSize: 12, color: "#ffffff" }}>
            Generated on {new Date().toLocaleDateString()}
          </Text>
        )}
      </View>

      {/* Summary Section */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Project Summary</Text>
        <View style={styles.summaryContainer}>
          <View style={styles.summaryItem}>
            <Text style={styles.summaryLabel}>Total Hours</Text>
            <Text style={styles.summaryValue}>{estimate.totalHours} hrs</Text>
          </View>
          <View style={styles.summaryItem}>
            <Text style={styles.summaryLabel}>Hourly Rate</Text>
            <Text style={styles.summaryValue}>${estimate.hourlyRate}</Text>
          </View>
          <View style={styles.summaryItem}>
            <Text style={styles.summaryLabel}>Total Cost</Text>
            <Text style={styles.totalCost}>
              ${estimate.totalCost.toLocaleString()}
            </Text>
          </View>
        </View>
      </View>

      {/* Feature Breakdown */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Feature Breakdown</Text>
        {estimate.breakdown.map((item, index) => (
          <View key={index} style={styles.breakdownItem}>
            <Text style={styles.breakdownFeature}>{item.feature}</Text>
            <Text style={styles.breakdownHours}>{item.hours} hrs</Text>
            <Text style={styles.breakdownCost}>
              ${item.cost.toLocaleString()}
            </Text>
          </View>
        ))}
      </View>

      {/* Footer */}
      <View style={styles.footer}>
        <Text>
          This {isProposal ? "proposal" : "estimate"} was generated by
          MyAppCostEstimator
        </Text>
        <Text>Generated on {new Date().toLocaleString()}</Text>
      </View>
    </Page>
  </Document>
);
